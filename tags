!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
CFLAGS	Makefile	/^CFLAGS  = -I. -Wall -MMD -MP$/;"	m
DEPS	Makefile	/^DEPS = $(SRCS:.c=.d)$/;"	m
HANDLER_H	handler/handler.h	2;"	d
HEADS_H	head/head.h	2;"	d
IPV4HDRLEN	head/head.h	9;"	d
IPVERSION	head/head.h	8;"	d
ITERATOR_GET_AS	vector/vector.h	114;"	d
Iterator	vector/vector.h	/^typedef struct Iterator {$/;"	s
Iterator	vector/vector.h	/^} Iterator;$/;"	t	typeref:struct:Iterator
LDFLAGS	Makefile	/^LDFLAGS = -lpcap -lpthread$/;"	m
MAX	vector/vector.h	138;"	d
NW_FILTER_ACK	modes.h	3;"	d
NW_FILTER_FIN	modes.h	6;"	d
NW_FILTER_NULL	modes.h	5;"	d
NW_FILTER_SYN	modes.h	2;"	d
NW_FILTER_UDP	modes.h	1;"	d
NW_FILTER_XMAS	modes.h	4;"	d
NW_SNAPLEN	nward.c	9;"	d	file:
N_MODES	modes.h	8;"	d
OBJS	Makefile	/^OBJS = $(SRCS:.c=.o)$/;"	m
SRCS	Makefile	/^SRCS := nward.c$/;"	m
SUSP_H	data/susp.h	2;"	d
SUSP_INITIALIZER	data/susp.h	12;"	d
SYNNED_H	data/synned.h	2;"	d
SYNNED_INITIALIZER	data/synned.h	11;"	d
TARG	Makefile	/^TARG = nward$/;"	m
TCPACK	head/head.h	12;"	d
TCPFIN	head/head.h	14;"	d
TCPRST	head/head.h	13;"	d
TCPSYN	head/head.h	11;"	d
VECTOR_ERROR	vector/vector.h	33;"	d
VECTOR_FOR_EACH	vector/vector.h	130;"	d
VECTOR_GET_AS	vector/vector.h	94;"	d
VECTOR_GROWTH_FACTOR	vector/vector.h	30;"	d
VECTOR_H	vector/vector.h	22;"	d
VECTOR_INITIALIZER	vector/vector.h	37;"	d
VECTOR_MINIMUM_CAPACITY	vector/vector.h	29;"	d
VECTOR_SHRINK_THRESHOLD	vector/vector.h	31;"	d
VECTOR_SUCCESS	vector/vector.h	34;"	d
VECTOR_UNINITIALIZED	vector/vector.h	36;"	d
__STDC_WANT_LIB_EXT1__	vector/vector.c	21;"	d	file:
_match_con	data/synned.c	/^static int _match_con (const struct tcp_con *con1, const struct tcp_con *con2)$/;"	f	file:
_vector_adjust_capacity	vector/vector.c	/^int _vector_adjust_capacity(vector_t* vector) {$/;"	f
_vector_assign	vector/vector.c	/^void _vector_assign(vector_t* vector, size_t index, void* element) {$/;"	f
_vector_const_offset	vector/vector.c	/^const void* _vector_const_offset(const vector_t* vector, size_t index) {$/;"	f
_vector_free_bytes	vector/vector.c	/^size_t _vector_free_bytes(const vector_t* vector) {$/;"	f
_vector_move_left	vector/vector.c	/^void _vector_move_left(vector_t* vector, size_t index) {$/;"	f
_vector_move_right	vector/vector.c	/^int _vector_move_right(vector_t* vector, size_t index) {$/;"	f
_vector_offset	vector/vector.c	/^void* _vector_offset(vector_t* vector, size_t index) {$/;"	f
_vector_reallocate	vector/vector.c	/^int _vector_reallocate(vector_t* vector, size_t new_capacity) {$/;"	f
_vector_should_grow	vector/vector.c	/^bool _vector_should_grow(vector_t* vector) {$/;"	f
_vector_should_shrink	vector/vector.c	/^bool _vector_should_shrink(vector_t* vector) {$/;"	f
_vector_swap	vector/vector.c	/^void _vector_swap(size_t* first, size_t* second) {$/;"	f
ackno	head/head.h	/^	u_int ackno;$/;"	m	struct:tcp_head
addr	data/susp.h	/^	} addr;$/;"	m	struct:suspect	typeref:union:suspect::__anon1
args	data/susp.c	/^struct args {$/;"	s	file:
bytes	head/head.h	/^	u_char bytes[8];$/;"	m	struct:ipv6_addr
bytes	head/head.h	/^	u_char bytes[8];$/;"	m	struct:ipv6_head_frag
bytes	head/ipv4_head.h	/^	u_char bytes[4];$/;"	m	struct:ipv4_addr
callback	modes.h	/^	pcap_handler callback;$/;"	m	struct:mode_opt
capacity	vector/vector.h	/^	size_t capacity;$/;"	m	struct:vector
checksum	head/head.h	/^	u_short checksum;$/;"	m	struct:tcp_head
config	modes.h	/^	void (*config)(pcap_t*);$/;"	m	struct:mode_opt
crc	head/ipv4_head.h	/^    u_short crc;            \/\/ Checksum$/;"	m	struct:udp_head
crc	head/ipv4_head.h	/^    u_short crc;            \/\/ Header checksum$/;"	m	struct:ipv4_head
daddr	head/head.h	/^    ipv6_addr daddr;   \/\/ Destination address$/;"	m	struct:ipv6_head
daddr	head/ipv4_head.h	/^    ipv4_addr daddr;        \/\/ Destination address$/;"	m	struct:ipv4_head
data	vector/vector.h	/^	void* data;$/;"	m	struct:vector
doff_ns	head/head.h	/^	u_char doff_ns;$/;"	m	struct:tcp_head
dport	head/ipv4_head.h	/^    u_short dport;          \/\/ Destination port$/;"	m	struct:udp_head
dst_addr	data/synned.h	/^	} dst_addr;$/;"	m	struct:tcp_con	typeref:union:tcp_con::__anon2
dst_port	data/synned.h	/^	u_short dst_port;$/;"	m	struct:tcp_con
dst_port	head/head.h	/^	u_short dst_port;$/;"	m	struct:tcp_head
element_size	vector/vector.h	/^	size_t element_size;$/;"	m	struct:Iterator
element_size	vector/vector.h	/^	size_t element_size;$/;"	m	struct:vector
filter	modes.h	/^	char *filter;$/;"	m	struct:mode_opt
finning	data/synned.h	/^	int finning;$/;"	m	struct:tcp_con
fl2	head/head.h	/^    u_short fl2;       \/\/ Flow Label (last 16 bits)$/;"	m	struct:ipv6_head
flags	head/head.h	/^	u_char flags;$/;"	m	struct:tcp_head
flags_fo	head/ipv4_head.h	/^    u_short flags_fo;       \/\/ Flags (3 bits) + Fragment offset (13 bits)$/;"	m	struct:ipv4_head
head_len	head/head.h	/^	u_char head_len;$/;"	m	struct:ipv6_head_hbh
head_len	head/head.h	/^	u_char head_len;$/;"	m	struct:ipv6_head_rout
hop_limit	head/head.h	/^    u_char  hop_limit; \/\/ Hop Limit$/;"	m	struct:ipv6_head
identification	head/ipv4_head.h	/^    u_short identification; \/\/ Identification$/;"	m	struct:ipv4_head
init_pcap_file	nward.c	/^static pcap_t *init_pcap_file(char *filename, struct mode_opt *mode)$/;"	f	file:
init_pcap_live	nward.c	/^static pcap_t *init_pcap_live(char *devname, struct mode_opt *mode)$/;"	f	file:
ip_ver	data/susp.h	/^	int ip_ver;$/;"	m	struct:suspect
ip_ver	data/synned.h	/^	int ip_ver;$/;"	m	struct:tcp_con
ipv4	data/susp.h	/^		ipv4_addr ipv4;$/;"	m	union:suspect::__anon1
ipv4	data/synned.h	/^		ipv4_addr ipv4;$/;"	m	union:tcp_con::__anon2
ipv4	data/synned.h	/^		ipv4_addr ipv4;$/;"	m	union:tcp_con::__anon3
ipv4_addr	head/ipv4_head.h	/^typedef struct ipv4_addr {$/;"	s
ipv4_addr	head/ipv4_head.h	/^} ipv4_addr;$/;"	t	typeref:struct:ipv4_addr
ipv4_head	head/ipv4_head.h	/^struct ipv4_head {$/;"	s
ipv6	data/susp.h	/^		ipv6_addr ipv6;$/;"	m	union:suspect::__anon1
ipv6	data/synned.h	/^		ipv6_addr ipv6;$/;"	m	union:tcp_con::__anon2
ipv6	data/synned.h	/^		ipv6_addr ipv6;$/;"	m	union:tcp_con::__anon3
ipv6_addr	head/head.h	/^typedef struct ipv6_addr {$/;"	s
ipv6_addr	head/head.h	/^} ipv6_addr;$/;"	t	typeref:struct:ipv6_addr
ipv6_head	head/head.h	/^struct ipv6_head {$/;"	s
ipv6_head_frag	head/head.h	/^struct ipv6_head_frag {$/;"	s
ipv6_head_hbh	head/head.h	/^struct ipv6_head_hbh {$/;"	s
ipv6_head_rout	head/head.h	/^struct ipv6_head_rout {$/;"	s
iterator_decrement	vector/vector.c	/^void iterator_decrement(Iterator* iterator) {$/;"	f
iterator_equals	vector/vector.c	/^bool iterator_equals(Iterator* first, Iterator* second) {$/;"	f
iterator_erase	vector/vector.c	/^int iterator_erase(vector_t* vector, Iterator* iterator) {$/;"	f
iterator_get	vector/vector.c	/^void* iterator_get(Iterator* iterator) {$/;"	f
iterator_increment	vector/vector.c	/^void iterator_increment(Iterator* iterator) {$/;"	f
iterator_index	vector/vector.c	/^size_t iterator_index(vector_t* vector, Iterator* iterator) {$/;"	f
iterator_is_after	vector/vector.c	/^bool iterator_is_after(Iterator* first, Iterator* second) {$/;"	f
iterator_is_before	vector/vector.c	/^bool iterator_is_before(Iterator* first, Iterator* second) {$/;"	f
iterator_next	vector/vector.c	/^void* iterator_next(Iterator* iterator) {$/;"	f
iterator_previous	vector/vector.c	/^void* iterator_previous(Iterator* iterator) {$/;"	f
len	head/ipv4_head.h	/^    u_short len;            \/\/ Datagram length$/;"	m	struct:udp_head
lhdr_len	handler/handler.h	/^	int lhdr_len;$/;"	m	struct:nward_hand_args
list	data/susp.c	/^	struct susp_list *list;$/;"	m	struct:args	typeref:struct:args::susp_list	file:
list_devs	nward.c	/^static void list_devs ()$/;"	f	file:
live	handler/handler.h	/^	int live;$/;"	m	struct:nward_hand_args
lock	data/susp.h	/^	pthread_mutex_t lock;$/;"	m	struct:susp_list
lock	data/synned.h	/^	pthread_mutex_t lock;$/;"	m	struct:synned_list
ltype_to_lhdrlen	nward.c	/^static inline int ltype_to_lhdrlen (int linktype) {$/;"	f	file:
main	nward.c	/^int main(int argc, char **argv)$/;"	f
match_susp	data/susp.c	/^int match_susp (struct susp_list *list, const ipv4_addr addr, int *pi)$/;"	f
maxticks	handler/handler.h	/^	int maxticks; \/\/ max ticks$/;"	m	struct:nward_hand_args
mode_opt	modes.h	/^struct mode_opt {$/;"	s
modes	modes.h	/^struct mode_opt modes[] = {$/;"	v	typeref:struct:mode_opt
name	handler/handler.h	/^	char *name;$/;"	m	struct:nward_hand_args
name	modes.h	/^	char *name;$/;"	m	struct:mode_opt
next_head	head/head.h	/^	u_char next_head;$/;"	m	struct:ipv6_head_hbh
next_head	head/head.h	/^	u_char next_head;$/;"	m	struct:ipv6_head_rout
next_head	head/head.h	/^    u_char  next_head; \/\/ Next Header$/;"	m	struct:ipv6_head
notify_attack	handler/io.c	/^void notify_attack (const char *msg, struct timeval ts, ipv4_addr attacker, ipv4_addr victim, int port) {$/;"	f
notify_warning	handler/io.c	/^void notify_warning (const char *msg, struct timeval ts, ipv4_addr attacker, ipv4_addr victim, int port) {$/;"	f
nward_ack_handler	handler/ack.c	/^void nward_ack_handler  (u_char *user, const struct pcap_pkthdr *h, const u_char *bytes)$/;"	f
nward_config_both	handler/config.c	/^void nward_config_both (pcap_t *pcap) {$/;"	f
nward_config_incoming	handler/config.c	/^void nward_config_incoming (pcap_t *pcap) {$/;"	f
nward_echo_handler	handler/echo.c	/^void nward_echo_handler (u_char *user, const struct pcap_pkthdr *h, const u_char *bytes)$/;"	f
nward_hand_args	handler/handler.h	/^struct nward_hand_args {$/;"	s
nward_mode_t	modes.h	/^typedef struct mode_opt *nward_mode_t;$/;"	t	typeref:struct:mode_opt
nward_syn_handler	handler/syn.c	/^void nward_syn_handler  (u_char *user, const struct pcap_pkthdr *h, const u_char *bytes)$/;"	f
nward_udp_handler	handler/udp.c	/^void nward_udp_handler  (u_char *user, const struct pcap_pkthdr *h, const u_char *bytes)$/;"	f
op_pad	head/ipv4_head.h	/^    u_int   op_pad;         \/\/ Option + Padding$/;"	m	struct:ipv4_head
opt	modes.h	/^	char opt;$/;"	m	struct:mode_opt
opts_pad	head/head.h	/^	u_char opts_pad[40];$/;"	m	struct:tcp_head
pl_len	head/head.h	/^    u_short pl_len;    \/\/ Payload length$/;"	m	struct:ipv6_head
pointer	vector/vector.h	/^	void* pointer;$/;"	m	struct:Iterator
print_not_supported	handler/io.c	/^void print_not_supported (struct timeval ts, int vers)$/;"	f
print_scan	handler/io.c	/^void print_scan (struct timeval ts)$/;"	f
print_usage	nward.c	/^static void print_usage()$/;"	f	file:
print_warn	handler/io.c	/^void print_warn (struct timeval ts) $/;"	f
proto	head/ipv4_head.h	/^    u_char  proto;          \/\/ Protocol$/;"	m	struct:ipv4_head
remove_susp	data/susp.c	/^void remove_susp (struct susp_list *list, const ipv4_addr addr)$/;"	f
replied	data/synned.h	/^	int replied;$/;"	m	struct:tcp_con
run_mode	nward.c	/^static void run_mode(pcap_t *pcap, int pc, int mt, useconds_t to, int warn, int live, struct mode_opt *mode)$/;"	f	file:
saddr	head/head.h	/^    ipv6_addr saddr;   \/\/ Source address$/;"	m	struct:ipv6_head
saddr	head/ipv4_head.h	/^    ipv4_addr saddr;        \/\/ Source address$/;"	m	struct:ipv4_head
seqno	head/head.h	/^	u_int seqno;$/;"	m	struct:tcp_head
size	vector/vector.h	/^	size_t size;$/;"	m	struct:vector
sport	head/ipv4_head.h	/^    u_short sport;          \/\/ Source port$/;"	m	struct:udp_head
src_addr	data/synned.h	/^	} src_addr;$/;"	m	struct:tcp_con	typeref:union:tcp_con::__anon3
src_port	data/synned.h	/^	u_short src_port;$/;"	m	struct:tcp_con
src_port	head/head.h	/^	u_short src_port;$/;"	m	struct:tcp_head
start_live_ticker	data/susp.c	/^int start_live_ticker (struct susp_list *list, useconds_t usec)$/;"	f
susp_add	data/susp.c	/^int susp_add (struct susp_list *list, const struct suspect *psus)$/;"	f
susp_list	data/susp.h	/^struct susp_list {$/;"	s
suspect	data/susp.h	/^struct suspect {$/;"	s
synned_add	data/synned.c	/^int synned_add (struct synned_list *list, const struct tcp_con *pcon)$/;"	f
synned_get	data/synned.c	/^struct tcp_con synned_get (struct synned_list *list, int i)$/;"	f
synned_list	data/synned.h	/^struct synned_list {$/;"	s
synned_match	data/synned.c	/^int synned_match (struct synned_list *list, const struct tcp_con *con, int *pi)$/;"	f
synned_remove	data/synned.c	/^void synned_remove (struct synned_list *list, const struct tcp_con *pcon)$/;"	f
synned_set_finning	data/synned.c	/^void synned_set_finning (struct synned_list *list, int i, int f)$/;"	f
synned_set_replied	data/synned.c	/^void synned_set_replied (struct synned_list *list, int i, int r)$/;"	f
tc2_fl1	head/head.h	/^    u_char  tc2_fl1;   \/\/ Traffic Class (last 4 bits) + Flow Label (first 4 bits)$/;"	m	struct:ipv6_head
tcp_con	data/synned.h	/^struct tcp_con {$/;"	s
tcp_head	head/head.h	/^struct tcp_head {$/;"	s
tick_all	data/susp.c	/^static void tick_all (struct susp_list *list) {$/;"	f	file:
tick_alrm_hand	data/susp.c	/^static void *tick_alrm_hand (void *pargs) {$/;"	f	file:
tick_offline	data/susp.c	/^void tick_offline (struct susp_list *list, struct timeval ts, useconds_t usec)$/;"	f
tick_susp_tcp	data/susp.c	/^int tick_susp_tcp (struct susp_list *list, const ipv4_addr addr, int max)$/;"	f
ticks	data/susp.h	/^	int ticks;$/;"	m	struct:suspect
tlen	head/ipv4_head.h	/^    u_short tlen;           \/\/ Total length $/;"	m	struct:ipv4_head
tos	head/ipv4_head.h	/^    u_char  tos;            \/\/ Type of service $/;"	m	struct:ipv4_head
ttl	head/ipv4_head.h	/^    u_char  ttl;            \/\/ Time to live$/;"	m	struct:ipv4_head
udp_head	head/ipv4_head.h	/^struct udp_head {$/;"	s
urg_ptr	head/head.h	/^	u_short urg_ptr;$/;"	m	struct:tcp_head
usec	data/susp.c	/^	useconds_t usec;$/;"	m	struct:args	file:
usec	handler/handler.h	/^	useconds_t usec;  \/\/ seconds per tick$/;"	m	struct:nward_hand_args
vector	data/susp.h	/^	vector_t vector;$/;"	m	struct:susp_list
vector	data/synned.h	/^	vector_t vector;$/;"	m	struct:synned_list
vector	vector/vector.h	/^typedef struct vector {$/;"	s
vector_assign	vector/vector.c	/^int vector_assign(vector_t* vector, size_t index, void* element) {$/;"	f
vector_back	vector/vector.c	/^void* vector_back(vector_t* vector) {$/;"	f
vector_begin	vector/vector.c	/^Iterator vector_begin(vector_t* vector) {$/;"	f
vector_byte_size	vector/vector.c	/^size_t vector_byte_size(const vector_t* vector) {$/;"	f
vector_clear	vector/vector.c	/^int vector_clear(vector_t* vector) {$/;"	f
vector_const_get	vector/vector.c	/^const void* vector_const_get(const vector_t* vector, size_t index) {$/;"	f
vector_copy	vector/vector.c	/^int vector_copy(vector_t* destination, vector_t* source) {$/;"	f
vector_copy_assign	vector/vector.c	/^int vector_copy_assign(vector_t* destination, vector_t* source) {$/;"	f
vector_destroy	vector/vector.c	/^int vector_destroy(vector_t* vector) {$/;"	f
vector_end	vector/vector.c	/^Iterator vector_end(vector_t* vector) {$/;"	f
vector_erase	vector/vector.c	/^int vector_erase(vector_t* vector, size_t index) {$/;"	f
vector_free_space	vector/vector.c	/^size_t vector_free_space(const vector_t* vector) {$/;"	f
vector_front	vector/vector.c	/^void* vector_front(vector_t* vector) {$/;"	f
vector_get	vector/vector.c	/^void* vector_get(vector_t* vector, size_t index) {$/;"	f
vector_insert	vector/vector.c	/^int vector_insert(vector_t* vector, size_t index, void* element) {$/;"	f
vector_is_empty	vector/vector.c	/^bool vector_is_empty(const vector_t* vector) {$/;"	f
vector_is_initialized	vector/vector.c	/^bool vector_is_initialized(const vector_t* vector) {$/;"	f
vector_iterator	vector/vector.c	/^Iterator vector_iterator(vector_t* vector, size_t index) {$/;"	f
vector_move	vector/vector.c	/^int vector_move(vector_t* destination, vector_t* source) {$/;"	f
vector_move_assign	vector/vector.c	/^int vector_move_assign(vector_t* destination, vector_t* source) {$/;"	f
vector_pop_back	vector/vector.c	/^int vector_pop_back(vector_t* vector) {$/;"	f
vector_pop_front	vector/vector.c	/^int vector_pop_front(vector_t* vector) {$/;"	f
vector_push_back	vector/vector.c	/^int vector_push_back(vector_t* vector, void* element) {$/;"	f
vector_push_front	vector/vector.c	/^int vector_push_front(vector_t* vector, void* element) {$/;"	f
vector_reserve	vector/vector.c	/^int vector_reserve(vector_t* vector, size_t minimum_capacity) {$/;"	f
vector_resize	vector/vector.c	/^int vector_resize(vector_t* vector, size_t new_size) {$/;"	f
vector_setup	vector/vector.c	/^int vector_setup(vector_t* vector, size_t capacity, size_t element_size) {$/;"	f
vector_shrink_to_fit	vector/vector.c	/^int vector_shrink_to_fit(vector_t* vector) {$/;"	f
vector_swap	vector/vector.c	/^int vector_swap(vector_t* destination, vector_t* source) {$/;"	f
vector_t	vector/vector.h	/^} vector_t;$/;"	t	typeref:struct:vector
ver_ihl	head/ipv4_head.h	/^    u_char  ver_ihl;        \/\/ Version (4 bits) + Internet header length (4 bits)$/;"	m	struct:ipv4_head
ver_tc1	head/head.h	/^    u_char  ver_tc1;   \/\/ Version (4 bits) + Traffic Class (first 4 bits)$/;"	m	struct:ipv6_head
warn	handler/handler.h	/^	int warn;$/;"	m	struct:nward_hand_args
win_size	head/head.h	/^	u_short win_size;$/;"	m	struct:tcp_head
